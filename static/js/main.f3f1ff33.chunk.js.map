{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","numPeople","setNumPeople","bill","setBill","tip","setTip","result","setResult","err","errMessage","setErr","updateError","error","errorMessage","index","newErr","useEffect","isNaN","Number","tipAmount","updateResult","className","type","name","defaultValue","onChange","e","test","target","value","preventDefault","updatePeople","updateBill","updateTip","filter","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAyHeA,MAtHf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEWF,mBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGSJ,mBAAS,GAHlB,mBAGNK,EAHM,KAGDC,EAHC,OAIeN,mBAAS,GAJxB,mBAINO,EAJM,KAIEC,EAJF,OAKSR,mBAAS,CAC7B,CACES,KAAK,EACLC,WAAY,IAEd,CACED,KAAK,EACLC,WAAY,IAEd,CACED,KAAK,EACLC,WAAY,MAhBH,mBAKND,EALM,KAKDE,EALC,KAoDb,SAASC,EAAYC,EAAOC,EAAcC,GACxC,IAAMC,EAAM,YAAOP,GACnBO,EAAOD,GAAS,CAAEN,IAAKI,EAAOH,WAAYI,GAC1CH,EAAOK,GAUT,OA9CAC,qBAAU,YAuCV,WACE,IAAKC,MAAMC,OAAOlB,KAAeiB,MAAMC,OAAOhB,KAAUe,MAAMb,KAAQ,CACpE,IAAIe,EAAaD,OAAOd,GAAO,IAASc,OAAOhB,GAC/CK,GAAWY,EAAYD,OAAOhB,IAASgB,OAAOlB,KAzChDoB,MA8CA,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,+CACA,8BACE,2BAAOA,UAAU,UAAjB,qBAEE,2BACEC,KAAK,OACLC,KAAK,mBACLC,aAAcxB,EACdyB,SAAU,SAAAC,GAAC,OAtDvB,SAAsBA,IACiB,IAAjC,QAAQC,KAAKD,EAAEE,OAAOC,OACxBlB,GAAY,EAAM,2BAA4B,IAE9CV,EAAayB,EAAEE,OAAOC,OACtBlB,GAAY,EAAO,GAAI,IAEzBe,EAAEI,iBA+CuBC,CAAaL,IAC5BL,UAAU,eAGd,2BAAOA,UAAU,UAAjB,iBAEE,2BACEC,KAAK,OACLC,KAAK,aACLC,aAActB,EACduB,SAAU,SAAAC,GAAC,OAtDvB,SAAoBA,IACuC,IAArD,4BAA4BC,KAAKD,EAAEE,OAAOC,OAC5ClB,GAAY,EAAM,0BAA2B,IAE7CR,EAAQuB,EAAEE,OAAOC,OACjBlB,GAAY,EAAO,GAAI,IAEzBe,EAAEI,iBA+CuBE,CAAWN,IAC1BL,UAAU,eAGd,2BAAOA,UAAU,UAAjB,QAEE,2BACEC,KAAK,OACLC,KAAK,QACLC,aAAcpB,EACdqB,SAAU,SAAAC,GAAC,OAtDvB,SAAmBA,IACoC,IAAjD,wBAAwBC,KAAKD,EAAEE,OAAOC,OACxClB,GAAY,EAAM,yBAA0B,IAE5CN,EAAOqB,EAAEE,OAAOC,OAChBlB,GAAY,EAAO,GAAI,IAEzBe,EAAEI,iBA+CuBG,CAAUP,IACzBL,UAAU,cAPd,MAYF,2BACG,IADH,yBAEwB,0BAAMA,UAAU,cAAcf,IAEtD,2BACGE,EACE0B,QAAO,SAAAtB,GAAK,OAAkB,IAAdA,EAAMJ,OACtB2B,KAAI,SAAAvB,GAAK,OACR,yBAAKS,UAAU,gBAAgBT,EAAMH,mBCrG/B2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f3f1ff33.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nfunction App() {\n  const [numPeople, setNumPeople] = useState(0);\n  const [bill, setBill] = useState(0);\n  const [tip, setTip] = useState(0);\n  const [result, setResult] = useState(0);\n  const [err, setErr] = useState([\n    {\n      err: false,\n      errMessage: \"\"\n    },\n    {\n      err: false,\n      errMessage: \"\"\n    },\n    {\n      err: false,\n      errMessage: \"\"\n    }\n  ]);\n  useEffect(() => {\n    updateResult();\n  });\n  function updatePeople(e) {\n    if (/^\\d+$/.test(e.target.value) === false) {\n      updateError(true, \"Invalid format in People\", 0);\n    } else {\n      setNumPeople(e.target.value);\n      updateError(false, \"\", 0);\n    }\n    e.preventDefault();\n    return;\n  }\n  function updateBill(e) {\n    if (/^[0-9]+(\\.[0-9]{1,2})?$/gm.test(e.target.value) === false) {\n      updateError(true, \"Invalid format in Bills\", 1);\n    } else {\n      setBill(e.target.value);\n      updateError(false, \"\", 1);\n    }\n    e.preventDefault();\n    return;\n  }\n  function updateTip(e) {\n    if (/^[0-9]+(\\.[0-9]*)?$/gm.test(e.target.value) === false) {\n      updateError(true, \"Invalid format in Tips\", 2);\n    } else {\n      setTip(e.target.value);\n      updateError(false, \"\", 2);\n    }\n    e.preventDefault();\n    return;\n  }\n  function updateError(error, errorMessage, index) {\n    const newErr = [...err];\n    newErr[index] = { err: error, errMessage: errorMessage };\n    setErr(newErr);\n    return;\n  }\n  function updateResult() {\n    if (!isNaN(Number(numPeople) && !isNaN(Number(bill) && !isNaN(tip)))) {\n      let tipAmount = (Number(tip) / 100.0) * Number(bill);\n      setResult((tipAmount + Number(bill)) / Number(numPeople));\n    }\n    return;\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Bill Splitter </h1>\n        <form>\n          <label className=\"labels\">\n            Number of People :\n            <input\n              type=\"text\"\n              name=\"Number of People\"\n              defaultValue={numPeople}\n              onChange={e => updatePeople(e)}\n              className=\"input-box\"\n            />\n          </label>\n          <label className=\"labels\">\n            Total Bill : $\n            <input\n              type=\"text\"\n              name=\"Total Bill\"\n              defaultValue={bill}\n              onChange={e => updateBill(e)}\n              className=\"input-box\"\n            />\n          </label>\n          <label className=\"labels\">\n            Tip :\n            <input\n              type=\"text\"\n              name=\"% Tip\"\n              defaultValue={tip}\n              onChange={e => updateTip(e)}\n              className=\"input-box\"\n            />\n            %\n          </label>\n        </form>\n        <p>\n          {\" \"}\n          Amount per person : $ <span className=\"amount-box\">{result}</span>\n        </p>\n        <p>\n          {err\n            .filter(error => error.err === true)\n            .map(error => (\n              <div className=\"error-prompt\">{error.errMessage}</div>\n            ))}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}